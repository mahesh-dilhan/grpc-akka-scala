
// Generated by Akka gRPC. DO NOT EDIT.
package io.mahesh.grpcakka

import akka.annotation.ApiMayChange

/**
 * The greeting service definition.
 */
trait GreeterService {
  
  /**
   * Sends a greeting
   */
  def sayHello(in: io.mahesh.grpcakka.HelloRequest): scala.concurrent.Future[io.mahesh.grpcakka.HelloReply]
  
  /**
   * #service-request-reply
   * #service-stream
   * The stream of incoming HelloRequest messages are
   * sent out as corresponding HelloReply. From
   * all clients to all clients, like a chat room.
   */
  def sayHelloToAll(in: akka.stream.scaladsl.Source[io.mahesh.grpcakka.HelloRequest, akka.NotUsed]): akka.stream.scaladsl.Source[io.mahesh.grpcakka.HelloReply, akka.NotUsed]
  
}



object GreeterService extends akka.grpc.ServiceDescription {
  val name = "GreeterService"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    io.mahesh.grpcakka.GrpcakkaProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val HelloRequestSerializer = new ScalapbProtobufSerializer(io.mahesh.grpcakka.HelloRequest.messageCompanion)
    
    val HelloReplySerializer = new ScalapbProtobufSerializer(io.mahesh.grpcakka.HelloReply.messageCompanion)
    
  }

  @ApiMayChange
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    
    val sayHelloDescriptor: MethodDescriptor[io.mahesh.grpcakka.HelloRequest, io.mahesh.grpcakka.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "SayHello"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val sayHelloToAllDescriptor: MethodDescriptor[io.mahesh.grpcakka.HelloRequest, io.mahesh.grpcakka.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "SayHelloToAll"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
  }
}
